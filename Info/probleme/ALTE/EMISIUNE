	A. Televiziune prin cablu.
	O retea TV prin cablu gestioneaza si distribuie mai multe programe. 
Ea vrea sa-si aranjeze un canal propriu pe care sa transmita emisiuni (traduse)
ale programelor receptionate, astfel ca abonatii sai sa poata vedea emisiunile
fara sa piarda sfarsitul unuia sau inceputul alteia.
	Pentru a realiza aceasta, Departamentul de Control al Programelor (DCP)
a identificat anumite momente numite "puncte de aliniere", unde ar trebui in
mod ideal ca o emisiune de pe un canal sa se termine si alta (de pe alt canal)
sa inceapa. Unele puncte de aliniere sunt mai importante decat altele.
	De exemplu momentul de incepere al unui meci transmis in direct este 
un punct de aliniere important; deoarece el este urmarit de multi abonati, 
reteaua vrea sa-l transmita pe propriul sau canal fara ca prin aceasta sa se
rateze sfarsitul emisiunii precedente, dar nici inceputul meciului.
Alte emisiuni pot fi transmise in reluare (de exemplu filmele).
	Se cere sa se scrie o solutie care determina cea mai buna ordine de
aranjare a programelor pe canalul retelei.
	Un "timp mort" este valoarea absoluta a diferentei intre timpul unui
punct de aliniere si cel mai apropiat timp de inceput sau de sfarsit al unei 
emisiuni. "Timpul mort total" la un anumit nivel de importanta este suma 
tuturor timpilor morti pentru punctele de aliniere la acel nivel de importanta.
O ordine a emisiunilor este mai buna decat alta daca are un timp mort total
mai mic la un anumit nivel de importanta si aceeleasi valori de timp mort total
la toate nivelele mai ridicate de importanta (daca exista).
Intrare:
  Citirea se face dintr-un fisier al carui nume sa da la tastatura.
  Problema trebuie sa accepte mai multe seturi de date. Fiecare set va incepe
cu un numar intreg p (0<=p<=8), specificand numarul de emisiuni care trebuie
ordonate. Un set de date care incepe cu primul numar 0 anunta sfarsitul datelor
de test.
   Dupa p, pe aceeasi linie se dau p numere intregi specificand duratele 
emisiunilor (in minute). Ordinea in care sunt date nu are importanta.
  Urmatoarea linie de intrare specifica punctele de aliniere. Prima cifra da
numarul total a (0<=a<=8) de puncte de aliniere si este urmat de a perechi de
numere intregi. In fiecare pereche, primul numar i (0<=i<=5) da importanta
punctului de aliniere. Punctele de aliniere marcate cu 1 sunt cele mai importante;
cele marcate cu 2 au o importanta secundara, etc.
Al doilea intreg al perechii t, specifica timpul (de la inceputul emisiunii)
cand apare punctul de aliniere. Nu exsita doua puncte de aliniere in acelasi
set de date care sa aiba aceeasi valoare pentru t.
Iesire:
Solutia va scoate pe ecran 3 linii pentru fiecare set de date. 
Prima linie va da numarul de ordine al setului de date prelucrat, si va avea forma
din exemplu.
Pe urmatoarea linie (vezi exemplul) se tipareste lungimea programelor in ordinea
in care vor fi preluate de retea in asa fel incat sa se realizeze cea mai buna 
sincronizare cu punctele de aliniere.
Pe a treia linie se scrie numarul timpul mort total.
Exemplu:
Pentru intrarea
4 30 45 45 15
3 1 60 2 90 3 15
6 1015 13 18 25 33
4 1 30 2 15 2 45 1 60
0
iesirea corecta este:
Set de date 1:
Ordine: 15 45 30 45
Eroare: 0
Set de date 2:
Ordine: 15 13 33 25 18 10
Eroare: 19

Comentariu: La setul 2 de date din exemplu, pare ca solutia corecta este
Ordine: 15 13 18 10 33 25
Eroare: 7
   Desi timpul mort total pare mai bun, in acest caz timpul mort pe nivel de
importanta 1 este de 6 minute, pe cand la solutia data in exemplu, el este de
3 minute; de aceea solutia din exemplu este cea corecta. 


Solutie:
{se dau doi vectori de numere naturale; unul reprezinta durate de programe,
celalalt - momente fixe ale unui post marcat. Se cere suma minutelor pierdute
din programele marcate. Un timp pierdut este cea mai mica distanta absoluta
dintre durata ultimei emisiuni si un moment fix.
                   Finala ACM Problema E}
program emisie;
uses crt;
var
 optim,emis,sum,opt:array[1..8] of integer;
 fix:array[1..8,1..9] of integer;
 nivel,min,i,j,p:integer;
procedure citire;
var
  ic,x,y,q,kc:integer;
begin
  write('dati numarul de programe: ');readln(p);
  writeln('dati durata programelor:');
  for ic:=1 to p do read(emis[ic]);readln;
  write('dati numarul de emisiuni marcate: ');readln(q);
  writeln('dati momentele de marcaj:');
  for ic:=1 to q do begin
     read(x); fix[x,9]:=fix[x,9]+1; read(fix[x,fix[x,9]]);
                   end;
  writeln;
  {ordonarea emisiunilor marcate}
  for kc:=1 to 8 do
  repeat
    y:=0;
    for ic:=1 to fix[kc,9]-1 do
      if fix[kc,ic]>fix[kc,ic+1] then begin
         x:=fix[kc,ic];fix[kc,ic]:=fix[kc,ic+1];fix[kc,ic+1]:=x;y:=1
                              end;
  until y=0;
  {se determina numarul de nivele de prioritate}
  nivel:=9;
  repeat nivel:=nivel-1 until fix[nivel,9]<>0;
end;
procedure test;
var
 a:array[1..8] of integer;
 t,s,x,y,kt:integer;
begin
  a[1]:=emis[1];
  for s:=2 to p do a[s]:=a[s-1]+emis[s];
  for s:=1 to nivel do sum[s]:=0;
  for kt:=1 to nivel do begin
    t:=1;
    for s:=1 to fix[kt,9] do begin
     while a[t]<fix[kt,s] do t:=t+1;
     x:=a[t]-fix[kt,s];y:=fix[kt,s]-a[t-1];
     if x<y then sum[kt]:=sum[kt]+x else sum[kt]:=sum[kt]+y
                            end
                   end;
    s:=1;
    while opt[s]=sum[s] do s:=s+1;
  if (s<=nivel) and (opt[s]>sum[s]) then begin
     for t:=1 to nivel do opt[t]:=sum[t];
     for t:=1 to p do optim[t]:=emis[t];
        end;
end;
procedure perm(jj:integer);
var
  ii,k:integer;
begin
  if jj<p then
       for ii:=jj to p do begin
          k:=emis[ii];emis[ii]:=emis[jj];emis[jj]:=k;
          perm(jj+1);
          if jj>p-2 then test;
          k:=emis[ii];emis[ii]:=emis[jj];emis[jj]:=k;
             end
end;
begin
  clrscr;
  for i:=1 to 8 do
     for j:=1 to 9 do fix[i,j]:=0;
  for i:=1 to 8 do opt[i]:=30000;
  citire;
  perm(1);
  writeln('cea mai buna alegere a programelor este:');
  for i:=1 to p do write(optim[i],'  ');
  min:=0;
  for i:=1 to nivel do min:=min+opt[i];
  writeln; write('Eroare: ',min);
end.
