                  1. Arbore partial minim pentru grafuri mari
                  -------------------------------------------

                    Program sursa   : a.pas sau a.c
                    Intrare         : a.dat

    Problema gasiri arborelui partial minim al unui graf este foarte cunoscuta.
De data aceasta  problema  consta in a gasi (eficient)  arborele partial minim
al unui graf cu un numar  foarte mare de muchii a carui  reprezentare deci, nu
mai poate fi  pastrata in memorie ci trebuie  pastrata (si prelucrata) intr-un
fisier.

Intrare:
----------
    Fisierul de intrare contine mai multe seturi de date. Un set de date este
format dintr-o linie care contine numarul n  de noduri al grafului (n<=1000),
urmat  de mai multe linii, fiecare linie  reprezentand  o muchie a  grafului.
O muchie  a grafului este reprezentata pe o linie  sub forma unui  triplet de
numere intregi  i j c,  unde i si j reprezinta capetele muchiei, iar c costul
acesteia. Un set de date se incheie cu o linie ce contine caracterul #.

Iesire:
---------
    La terminal trebuie sa se afiseze costul total al arborelui partial minim
si muchiile acestuia.

Exemplu:
----------
    Daca fisierul de intrare are urmatorul continut:

3
1 2 1
2 3 3
1 3 2
#
6
1 2 1
1 6 2
3 4 3
4 5 1
1 3 3
2 3 2
3 5 1
5 6 1
2 5 2
3 6 2
#

    Iesirea trebuie sa arate ca mau jos:
------------------------------------------------------------------------------

Costul total:  3
Muchiile:
1 2
1 3
Costul total:  6
Muchiile:
3 5
5 6
4 5
1 2
1 6
=================================
Solutie (Mihai Stroe)

    Problema se rezolva cu algoritmul clasic in n^2 ( Dijkstra modificat ).
    Se foloseste un fisier indexat pe linii in care se memoreaza matricea de
  adiacenta a grafului. Dupa crearea sa, se citesc O(n) linii din el, deci nu
  se pierde mult timp cu citirea; cel mai mult dureaza crearea fisierului, in
  care se scriu m linii ( m = numarul de muchii ).
    Programul 'observa' daca graful nu admite arbore (nu e conex) .
}

uses crt;
type ar=array[1..1000]of word;
var lin,luate,dist,tata:ar;
    fi:text;
    a:file of ar;
    cost,nr,mp,min,i,j,k,l,m,n:longint;
    s:string;
    ch:char;
    ce:integer;

procedure solve;
begin
  fillchar(luate,sizeof(luate),0);
  fillchar(dist,sizeof(dist),0);
  fillchar(lin,sizeof(lin),0);
  for i:=2 to n do tata[i]:=1;
  luate[1]:=1;
  seek(a,1);
  cost:=0;
  read(a,dist);
  for nr:=1 to n-1 do
      begin
        min:=65520;
        mp:=0;
        for i:=1 to n do
            if(dist[i]<>0)and(luate[i]<>1)and(dist[i]<min)then begin min:=dist[i];mp:=i;end;
        luate[mp]:=1;
        if min=65520 then begin writeln('graful nu admite arbore');writeln('press a key');ch:=readkey;clrscr;exit;end;
        cost:=cost+min;
        seek(a,mp);
        read(a,lin);
        for i:=1 to n do
            if (lin[i]<>0)and((lin[i]<dist[i])or(dist[i]=0))and(luate[i]=0) then begin dist[i]:=lin[i];tata[i]:=mp;end;
      end;
   fillchar(lin,sizeof(lin),0);
   writeln('Costul total: ',cost);
   writeln('Muchiile:');
   for i:=2 to n do
       begin
         if i<tata[i] then writeln(i,' ',tata[i]) else writeln(tata[i],' ',i);
         if i mod 20=0 then begin writeln('press a key');ch:=readkey;clrscr;end;
       end;
   writeln('press a key');ch:=readkey;clrscr;
end;

procedure readdata;
begin
  write('Introduceti numele fisierului de intrare ');
  readln(s);
  assign(fi,s);
  reset(fi);
  while not seekeof(fi) do
    begin
      readln(fi,n);
      assign(a,'q.qwe');
      rewrite(a);
      fillchar(lin,sizeof(lin),0);
      for i:=0 to n do write(a,lin);
      while ch<>'#' do
      begin
      read(fi,ch);
      if ch<>'#' then
         begin
           s:=ch;
           while ch<>' ' do begin read(fi,ch);s:=s+ch;end;
           delete(s,length(s),1);
           val(s,i,ce);
           read(fi,j);
           readln(fi,k);
           seek(a,i);
           read(a,lin);
           lin[j]:=k;
           seek(a,i);
           write(a,lin);
           seek(a,j);
           read(a,lin);
           lin[i]:=k;
           seek(a,j);
           write(a,lin);
         end;
      end;
      ch:=' ';
      solve;
      close(a);
    end;
  close(fi);
end;

begin
  readdata;
end.
