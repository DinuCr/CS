Selectia lotului facultatii de matematica, 1996
Ciclu (Victor Mitrana)
{rezolvata}

         Se da un graf neorientat cu N virfuri si M muchii. Pentru trei
virfuri A,B,C sa se determine daca exista un ciclu elementar care sa treaca
prin A si B si care sa nu treaca prin C.
Limite:   N<=1.000, M<=10.000
Intrare:
  Fisierul de intrare contine mai multe seturi de date. Un set de
date este format dintr-o linie pe care este scris N A B si C, urmata de
M linii pe care sint date muchiile, cite una pe linie. Muchia (i,j) este
data sub forma:
i j
Fiecare set se termina cu o linie goala.
Iesire:
 Pentru fiecare set de date se va scrie o linie continind
1
in cazul in care exista ciclu si respectiv
0
in caz contrar.

Exemplu:
//intrare:
4 2 1 4         // N A B C
1 2             // muchia {1,2}
2 3             // muchia {2,3}
3 4             //...
4 1
3 1
4 2 1 4         // N A B C - al doilea set
1 2             // muchia {1,2}
2 3             // muchia {2,3}
3 4             //...
4 1

//iesire:
1              // exista ciclu
0              // nu exista ciclu

========================================================
Solutia 1 (Catalin Francu)
program Ciclu;
{$B-,I-,R-,S-}
const NMax=1000;
type BooleanVector=array[1..NMax] of Boolean;
     Matrix=array[1..500,1..125] of Byte;
var P1,P2:^Matrix;
    Used:BooleanVector;
    N,A,B,C:Integer;
    InName:String;

procedure SetLine(X,Y,Value:Integer);
var Oct,Bit:Integer;
begin
  Oct:=((Y-1) shr 3)+1;
  Bit:=7 xor ((Y-1) and 7);
  if X<=500
    then if Value=1
           then P1^[X,Oct]:=P1^[X,Oct] or (1 shl Bit)
           else P1^[X,Oct]:=P1^[X,Oct] and ($FF xor (1 shl Bit))
    else if Value=1
           then P2^[X-500,Oct]:=P2^[X-500,Oct] or (1 shl Bit)
           else P2^[X-500,Oct]:=P2^[X-500,Oct] and ($FF xor (1 shl Bit))
end;

function LineExists(X,Y:Integer):Boolean;
var Oct,Bit:Integer;
begin
  Oct:=((Y-1) shr 3)+1;
  Bit:=7 xor ((Y-1) and 7);
  if X<=500
    then LineExists:=(P1^[X,Oct] and (1 shl Bit)<>0)
    else LineExists:=(P2^[X-500,Oct] and (1 shl Bit)<>0)
end;

procedure ReadData;
var i,j:Integer;
begin
  ReadLn(N,A,B,C);
  for i:=1 to 500 do
    for j:=1 to 125 do
      begin
        P1^[i,j]:=0;
        P2^[i,j]:=0;
      end;
  while not (Eoln or Eof) do
    begin
      ReadLn(i,j);
      if (i<>C) and (j<>C)
        then begin
               SetLine(i,j,1);
               SetLine(j,i,1);
             end;
    end;
end;

procedure Walk(K,Level:Integer;FoundIt:Boolean;var Success:Boolean);
var i:Integer;
begin
  Used[K]:=True;
  if (Level>=3) and (FoundIt or (K=B)) and LineExists(K,A)
    then Success:=True
    else for i:=1 to N do
           if (not Used[i]) and LineExists(K,i) and not Success
             then Walk(i,Level+1,FoundIt or (K=B),Success);
end;

procedure FindCycle;
var i,j:Integer;
    Success:Boolean;
begin
  for i:=1 to N do Used[i]:=False;
  Success:=False;
  Walk(A,1,False,Success);
  if Success then WriteLn('1') else WriteLn('0');
end;

begin
  New(P1);New(P2);
  Write('Numele fisierului de intrare: ');ReadLn(InName);
  Assign(Input,InName);Reset(Input);
  while not Eof do
    begin
      ReadData;
      FindCycle;
    end;
  Close(Input);
end.
------------------------------------------
Solutia 2 (Vlad Marius)
program Cicluri_Elementare;
{ Vlad Marius - Cicluri elementare }
uses crt;
var i,j,k,n,m,a,b,c:integer;
    x:array[1..100,1..2] of byte;
    y:array[1..100] of byte;
    f:text;
    sw:boolean;

procedure ciclu;
  var i,j,k:integer;
 begin
  for i:=1 to n do y[i]:=0;
  y[a]:=1;
  sw:=true;
  while sw do
   begin
    sw:=false;
    for i:=1 to n do if y[i]=1 then for j:=1 to m do if (x[j,1]=i) or (x[j,2]=i) then
     begin
      if x[j,1]=i then k:=x[j,2] else k:=x[j,1];
      if (y[k]=0) and (k<>b) then
       begin
        x[j,1]:=0;
        x[j,2]:=0;
        sw:=true;
        y[k]:=1;
       end;
     end;
   end;
  k:=0;
  for i:=1 to m do if (x[i,1]=b) or (x[i,2]=b) then
   begin
    if x[i,1]=b then j:=x[i,2] else j:=x[i,1];
    if y[j]>0 then k:=k+1;
   end;
  if k<2 then writeln('0') else writeln('1');
 end;

begin
clrscr;
assign(f,'ciclu.in');
reset(f);
n:=0;
while not eof(f) do
 begin
  read(f,i,j);
  if eoln(f) then
   begin
    if (i<>c) and (j<>c) then
     begin
      k:=k+1;
      x[k,1]:=i;
      x[k,2]:=j;
     end;
    readln(f);
   end else begin
    m:=k;
    if n>0 then ciclu;
    n:=i;
    a:=j;
    readln(f,b,c);
    k:=0;
   end;
 end;
m:=k;
ciclu;
close(f);
end.
----------------------------------------------
Solutia 3 (Mihai Badoiu)
type
	ptip=^tip;
	tip=record
		info:integer;
		next:ptip;
		end;
var
	n,a,b,c:integer;
	bb:integer;
	v:array[1..1000] of ptip;
	vs:array[1..1000] of integer;

procedure scs;
begin
	if vs[b]=1 then
	begin
		bb:=0;
		writeln(1);
		end;
end;

procedure bk(k:integer);
var
	p:ptip;
begin
	if k=c then
		exit;
	if bb=0 then
		exit;
	if k=a then
		scs
	else
	begin
		p:=v[k];
		while p<>nil do
		begin
			if vs[p^.info]=0 then
			begin
				vs[p^.info]:=1;
				bk(p^.info);
				vs[p^.info]:=0;
				end;
			p:=p^.next;
			end;
		end;
end;

procedure init;
var
	i:integer;
	p,q:ptip;
begin
	for i:=1 to 1000 do
	begin
		vs[i]:=0;
		while v[i]<>nil do
		begin
			q:=v[i]^.next;
			dispose(v[i]);
			v[i]:=q;
			end;
		end;
end;

procedure calcul;
var
	p:ptip;
begin
	bb:=1;
	p:=v[a];
	while p<>nil do
	begin
		bk(p^.info);
		p:=p^.next;
		end;
	if bb=1 then
		writeln(0);
end;

procedure load;
var
	f:text;
	p:ptip;
	i,j:integer;
begin
	assign(f,'ciclu.in');
	reset(f);
	read(f,n,a);
	while not seekeof(f) do
	begin
		init;
		read(f,b,c);
		while seekeoln(f) and not seekeof(f) do
		begin
			read(f,i,j);
			if seekeoln(f) then
			begin
				new(p);
				p^.info:=j;
				p^.next:=v[i];
				v[i]:=p;
				end
			else
			begin
				calcul;
				n:=i;
				a:=j;
				end;
			end;
		end;
	calcul;
	close(f);
end;

begin
	writeln;
	load;
end.
----------------------------------------
Solutia 4 (Ovidiu ghiorghioiu)
{$A+,B-,D+,E+,F-,G-,I+,L+,N-,O-,P-,Q-,R-,S+,T-,V+,X+}
{$M 65000,0,655360}

const nmax=1000;

type leg=^nod;
     nod=record
               s:integer;
               next:leg
     end;

var n,m,a,b,c,i,j,st:integer;
    is,bm:boolean;
    p:pointer;
    q:leg;
    mk:array[1..nmax] of boolean;
    h:array[1..nmax] of leg;
    f:text;
    s:string;

procedure back(k:integer);
var q:leg;
begin
     if (k=a) and bm and (st>2) then is:=true;
     if not mk[k] then begin
        inc(st);
        mk[k]:=true;
        q:=h[k];
        if k=b then bm:=true;
        while q<>nil do begin
              back(q^.s);
              q:=q^.next
        end;
        if k=b then bm:=false;
        dec(st);
     end;
end;

begin
     write('Numele fis. de intrare: ');readln(s);
     assign(f,s);reset(f);
     read(f,n,a);
     while not seekeof(f) do begin
           readln(f,b,c);
           mark(p);
           fillchar(h,n shl 2,0);
           while not seekeof(f) do begin
                 read(f,i,j);
                 if not seekeoln(f) then break
                 else begin
                      new(q);
                      q^.s:=j;
                      q^.next:=h[i];
                      h[i]:=q;
                      new(q);
                      q^.s:=i;
                      q^.next:=h[j];
                      h[j]:=q;
                      readln(f);
                 end;
           end;
           fillchar(mk,n,false);
           bm:=false;
           mk[c]:=true;
           is:=false;
           st:=0;
           back(a);
           writeln(byte(is));
           n:=i;
           a:=j;
           release(p);
     end;
     close(f);
end.
----------------------------
